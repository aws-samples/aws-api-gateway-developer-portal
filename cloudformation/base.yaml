---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: My Dev Portal Stack
Parameters:
  ArtifactsS3Bucket:
    Type: String
    Description: The S3 bucket in which the Lambda function code is stored. Bucket
      names are region-unique, so you must change this.

  DevPortalSiteS3Bucket:
    Type: String
    Description: The S3 bucket in which the web application code is stored. Bucket
      names are region-unique, so you must change this.
     
  DevPortalSiteCloudFrontCNAME:
    Type: String
    Description: The CNAME of your CloudFront distribution.

  DevPortalCustomersTableName:
    Type: String
    Description: The name of the DynamoDB Customers table.

  MarketplaceSubscriptionTopic:
    Type: String
    Description: The marketplace SNS topic for subscription/unsubscription events

  CognitoIdentityPoolName:
    Type: String
    Description: The name for your Cognito Identity Pool

Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionUri: ../lambdas/backend/dev-portal-express-proxy-api.yaml
      StageName: prod
      Variables:
        DevPortalFunctionName: !Ref DevPortalLambdaFunction

  WebsiteS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DevPortalSiteS3Bucket
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
        RoutingRules:
          - RoutingRuleCondition:
              HttpErrorCodeReturnedEquals: 404
            RedirectRule:
              HostName: !Join
                - ''
                - - !Ref DevPortalSiteS3Bucket
                  - .s3-website-
                  - !Ref 'AWS::Region'
                  - .amazonaws.com
              ReplaceKeyPrefixWith: '#!/'
  
  WebsiteCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      Origins:
        - DomainName: !Join
            - ''
            - !Ref DevPortalSiteS3Bucket
            - .s3-website-
            - !Ref 'AWS::Region'
            - .amazonaws.com
          Id: !Ref DevPortalSiteS3Bucket
        Enabled: 'true'
        DefaultRootObject: index.html
        Aliases:
        - !Ref DevPortalSiteCloudFrontCNAME
        DefaultCacheBehavior:
          AllowedMethods:
          - DELETE
          - GET
          - HEAD
          - OPTIONS
          - PATCH
          - POST
          - PUT
          TargetOriginId: !Ref DevPortalSiteS3Bucket
          ForwardedValues:
            QueryString: 'true'
            Cookies:
              Forward: ALL
          ViewerProtocolPolicy: allow-all
        PriceClass: PriceClass_200
        ViewerCertificate:
          CloudFrontDefaultCertificate: 'true'

  CustomersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DevPortalCustomersTableName
      AttributeDefinitions:
      - AttributeName: Id
        AttributeType: S
      - AttributeName: MarketplaceCustomerId
        AttributeType: S
      KeySchema:
      - AttributeName: Id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      GlobalSecondaryIndexes:
      - IndexName: MarketplaceCustomerIdIndex
        KeySchema:
        - AttributeName: MarketplaceCustomerId
          KeyType: HASH
        Projection:
          NonKeyAttributes:
          - ApiKeyId
          ProjectionType: INCLUDE
        ProvisionedThroughput:
          ReadCapacityUnits: '5'
          WriteCapacityUnits: '5'

  DevPortalLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - apigateway:*
            Resource: '*'
          - Effect: Allow
            Action:
            - aws-marketplace:ResolveCustomer
            Resource: '*'
          - Action:
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:dynamodb:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - :table/
                - !Ref CustomersTable
          - Action:
            - dynamodb:Query
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:dynamodb:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - :table/
                - !Ref CustomersTable
                - /index/MarketplaceCustomerIdIndex

  ApiGatewayMarketplaceMeteringRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ApiGatewayMarketplaceMeteringRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: ApiGatewayMeteringPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - aws-marketplace:BatchMeterUsage
            - aws-marketplace:ResolveCustomer
            Effect: Allow
            Resource: '*'

  LambdaApiGatewayExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DevPortalLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref ApiGatewayApi
          - '/*/*'

  LambdaCognitoUserPoolExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreSignupLambdaFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:cognito-idp:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':userpool/'
          - !Ref CognitoUserPool

  LambdaSNSExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SubscriptionListenerLambdaFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Join
        - ''
        - - ''
          - !Ref MarketplaceSubscriptionTopic

  LambdaSNSExecutionTestPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SubscriptionListenerLambdaFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:sns:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':marketplace-test-topic'

  DevPortalLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/backend
      Handler: index.handler
      MemorySize: 1024
      Role: !GetAtt DevPortalLambdaExecutionRole.Arn
      Runtime: nodejs4.3
      Timeout: 30
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /
            Method: ANY
        ProxyApiGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{proxy+}
            Method: ANY

  SubscriptionListenerLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/listener
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt DevPortalLambdaExecutionRole.Arn
      Runtime: nodejs4.3
      Timeout: 30

  CognitoCustomResourceLambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
        Path: '/'
        Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
            - Effect: Allow
              Action:
              - cognito-identity:CreateIdentityPool
              - cognito-identity:DeleteIdentityPool
              - cognito-identity:UpdateIdentityPool
              - cognito-identity:SetIdentityPoolRoles
              - cognito-idp:CreateUserPool
              - cognito-idp:DeleteUserPool
              - cognito-idp:UpdateUserPool
              - cognito-idp:CreateUserPoolClient
              - cognito-idp:DeleteUserPoolClient
              - cognito-idp:UpdateUserPoolClient
              - iam:PassRole
              Resource: '*'

  CognitoCustomResourceLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/cognito-cloudformation-custom-resource
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt CognitoCustomResourceLambdaExecutionRole.Arn
      Runtime: nodejs4.3
      Timeout: 30

  # PreSignupLambdaExecutionRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         Effect: Allow
  #         Principal:
  #           Service: lambda.amazonaws.com
  #         Action: sts:AssumeRole
  #     Path: '/'
  #     Policies:
  #     - PolicyName: root
  #       PolicyDocument:
  #         Version: '2012-10-17'
  #         Statement:
  #         - Effect: Allow
  #           Action:
  #           - logs:CreateLogGroup
  #           - logs:CreateLogStream
  #           - logs:PutLogEvents
  #           Resource: arn:aws:logs:*:*:*

  PreSignupLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/cognito-user-pools-auto-confirm
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt DevPortalLambdaExecutionRole.Arn
      Runtime: nodejs4.3
      Timeout: 3

  CognitoUserPool:
    Type: Custom::CognitoUserPool
    Properties:
      ServiceToken: !GetAtt CognitoCustomResourceLambda.Arn
      Options:
        PoolName: !Ref CognitoIdentityPoolName
        LambdaConfig:
          PreSignUp: !GetAtt PreSignupLambdaFunction.Arn
        Policies:
          PasswordPolicy:
            MinimumLength: 8
        Schema:
          - AttributeDataType: String
            Name: email
            Required: false

  CognitoUserPoolClient:
    Type: Custom::CognitoUserPoolClient
    Properties:
      ServiceToken: !GetAtt CognitoCustomResourceLambda.Arn
      Options:
        UserPoolId: !Ref CognitoUserPool
        ClientName: CognitoIdentityPool
        GenerateSecret: false
        RefreshTokenValidity: 30

  CognitoIdentityPool:
    Type: Custom::CognitoIdentityPool
    Properties:
      ServiceToken: !GetAtt CognitoCustomResourceLambda.Arn
      Options:
        IdentityPoolName: !Ref CognitoIdentityPoolName
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId: !Ref CognitoUserPoolClient
            ProviderName: !Join
              - ''
              - - cognito-idp.
                - !Ref 'AWS::Region'
                - .amazonaws.com/
                - !Ref CognitoUserPool

  CognitoAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action: sts:AssumeRoleWithWebIdentity
          Condition:
            StringEquals:
              'cognito-identity.amazonaws.com:aud': !Ref CognitoIdentityPool
            'ForAnyValue:StringLike':
              'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
      - PolicyName: CognitoAuthenticatedRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - execute-api:Invoke
            Resource: !Join
              - ''
              - - 'arn:aws:execute-api:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':'
                - !Ref ApiGatewayApi
                - /prod/*/*
      Path: '/'

  CognitoIdentityPoolRoles:
    Type: Custom::CognitoIdentityPoolRoles
    Properties:
      ServiceToken: !GetAtt CognitoCustomResourceLambda.Arn
      Options:
        IdentityPoolId: !Ref CognitoIdentityPool
        Roles:
          authenticated: !GetAtt CognitoAuthenticatedRole.Arn

Outputs:
  LambdaFunctionConsoleUrl:
    Description: Console URL for the Lambda Function.
    Value: !Join
      - ''
      - - https://
        - !Ref 'AWS::Region'
        - '.console.aws.amazon.com/lambda/home?region='
        - !Ref 'AWS::Region'
        - '#/functions/'
        - !Ref DevPortalLambdaFunction

  ApiGatewayApiConsoleUrl:
    Description: Console URL for the API Gateway API's Stage.
    Value: !Join
      - ''
      - - https://
        - !Ref 'AWS::Region'
        - '.console.aws.amazon.com/apigateway/home?region='
        - !Ref 'AWS::Region'
        - '#/apis/'
        - !Ref ApiGatewayApi
        - '/stages/prod'

  ApiUrl:
    Description: Invoke URL for your API. Clicking this link will perform a GET request
      on the root resource of your API.
    Value: !Join
      - ''
      - - https://
        - !Ref ApiGatewayApi
        - '.execute-api.'
        - !Ref 'AWS::Region'
        - '.amazonaws.com/prod'

  ApiId:
    Description: API Gateway API ID.
    Value: !Ref ApiGatewayApi

  DevPortalFunctionName:
    Description: Devleoper Portal Lambda Function Name.
    Value: !Ref DevPortalLambdaFunction

  WebsiteURL:
    Value: !Join
      - ''
      - - http://
        - !Ref DevPortalSiteS3Bucket
        - .s3-website-
        - !Ref 'AWS::Region'
        - .amazonaws.com
    Description: URL for website hosted on S3

  CognitoUserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref CognitoUserPool

  CognitoUserPoolClientId:
    Description: Cognito User Pool App Client ID
    Value: !Ref CognitoUserPoolClient

  CognitoIdentityPoolId:
    Description: Cognito Identity Pool ID
    Value: !Ref CognitoIdentityPool

  CustomersTable:
    Description: CustomersTable
    Value: !Ref CustomersTable
